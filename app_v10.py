# app_v10.py
# ------------------------------------------------------------
# Strangle Vendido Coberto ‚Äî v9 (com prioriza√ß√£o por baixa probabilidade)
# ------------------------------------------------------------

import streamlit as st
import pandas as pd
import numpy as np
import requests
import yfinance as yf
import io
import re
from bs4 import BeautifulSoup
from datetime import datetime, date
import math

# -------------------------
# Configura√ß√£o b√°sica
# -------------------------
st.set_page_config(page_title="Strangle Vendido Coberto ‚Äî v9", page_icon="üíº", layout="wide")

# CSS para legibilidade
st.markdown("""
<style>
.big-title {font-size:1.15rem; font-weight:700; margin: 0 0 .25rem 0;}
.small-help {color:var(--text-color-secondary, #6b7280); font-size:.95rem; margin: 0 0 .5rem 0;}
.strike-card{padding:.75rem 1rem; border:1px solid; border-radius:12px;}
.strike-label{font-size:.95rem; margin-bottom:.15rem; opacity:.85;}
.strike-value{font-size:1.6rem; font-weight:800;}
@media (prefers-color-scheme: light) {
  .strike-card{ background:#fafafa; border-color:#e5e7eb; }
  .strike-label{ color:#4b5563; }
  .strike-value{ color:#111827; }
}
@media (prefers-color-scheme: dark) {
  .strike-card{ background:#111827; border-color:#374151; }
  .strike-label{ color:#d1d5db; }
  .strike-value{ color:#f9fafb; }
}
</style>
""", unsafe_allow_html=True)

CONTRACT_SIZE = 100  # padr√£o B3
CACHE_TTL = 300      # 5 min

# -------------------------
# Utilit√°rios
# -------------------------
def br_to_float(s: str):
    if s is None or (isinstance(s, float) and np.isnan(s)):
        return np.nan
    if isinstance(s, (int, float)):
        return float(s)
    s = str(s).strip()
    if s == "":
        return np.nan
    s = s.replace(".", "").replace(",", ".")
    try:
        return float(s)
    except Exception:
        return np.nan

def pct_to_float(s: str):
    val = br_to_float(s)
    return val / 100.0 if pd.notna(val) else np.nan

def parse_date_br(d: str):
    if pd.isna(d):
        return None
    d = str(d).strip()
    try:
        return datetime.strptime(d, "%d/%m/%Y").date()
    except Exception:
        try:
            return datetime.strptime(d, "%Y-%m-%d").date()
        except Exception:
            return None

def format_brl(x: float):
    if pd.isna(x):
        return "‚Äî"
    return f"R$ {x:,.2f}".replace(",", "X").replace(".", ",").replace("X", ".")

def yahoo_symbol_from_b3(ticker_b3: str):
    t = (ticker_b3 or "").strip().upper()
    if not t.endswith(".SA"):
        t = t + ".SA"
    return t

# -------------------------
# Black‚ÄìScholes helpers
# -------------------------
SQRT_2 = math.sqrt(2.0)
def norm_cdf(x):
    return 0.5 * (1.0 + math.erf(x / SQRT_2))

def d1_d2(S, K, r, sigma, T):
    if S <= 0 or K <= 0 or sigma <= 0 or T <= 0:
        return (np.nan, np.nan)
    try:
        d1 = (math.log(S / K) + (r + 0.5 * sigma * sigma) * T) / (sigma * math.sqrt(T))
        d2 = d1 - sigma * math.sqrt(T)
        return d1, d2
    except Exception:
        return (np.nan, np.nan)

def prob_ITM_call(S, K, r, sigma, T):
    _, d2 = d1_d2(S, K, r, sigma, T)
    return norm_cdf(d2) if not np.isnan(d2) else np.nan

def prob_ITM_put(S, K, r, sigma, T):
    _, d2 = d1_d2(S, K, r, sigma, T)
    return norm_cdf(-d2) if not np.isnan(d2) else np.nan

# -------------------------
# Cache: lista de tickers (dadosdemercado)
# -------------------------
@st.cache_data(ttl=CACHE_TTL)
def fetch_b3_tickers():
    url = "https://www.dadosdemercado.com.br/acoes"
    r = requests.get(url, timeout=20)
    r.raise_for_status()
    soup = BeautifulSoup(r.text, "html.parser")
    try:
        dfs = pd.read_html(r.text)
        best = None
        for df in dfs:
            cols = [c.lower() for c in df.columns.astype(str)]
            if any("c√≥digo" in c or "codigo" in c or "ticker" in c for c in cols) and any("empresa" in c or "raz√£o" in c or "razao" in c or "nome" in c or "companhia" in c for c in cols):
                best = df
                break
        if best is None:
            best = dfs[0]
        best.columns = [str(c).strip() for c in best.columns]
        code_col = None
        name_col = None
        for c in best.columns:
            cl = c.lower()
            if code_col is None and ("c√≥digo" in cl or "codigo" in cl or "ticker" in cl or "s√≠mbolo" in cl or "simbolo" in cl or cl=="c√≥d."):
                code_col = c
            if name_col is None and ("empresa" in cl or "raz√£o" in cl or "razao" in cl or "nome" in cl or "companhia" in cl):
                name_col = c
        if code_col is None:
            code_col = best.columns[0]
        if name_col is None:
            name_col = best.columns[1] if len(best.columns) > 1 else best.columns[0]
        out = best[[code_col, name_col]].copy()
        out.columns = ["ticker", "empresa"]
        out["ticker"] = out["ticker"].astype(str).str.strip().str.upper()
        out["empresa"] = out["empresa"].astype(str).str.strip()
        out = out[out["ticker"].str.match(r"^[A-Z]{3,5}\d{0,2}$")]
        out = out.drop_duplicates(subset=["ticker"]).reset_index(drop=True)
        return out
    except Exception:
        return pd.DataFrame(columns=["ticker", "empresa"])

# -------------------------
# Cache: pre√ßo yfinance + HV20 proxy
# -------------------------
@st.cache_data(ttl=CACHE_TTL)
def fetch_yf_price_and_hv20(y_ticker: str):
    try:
        info = yf.Ticker(y_ticker)
        hist = info.history(period="60d", interval="1d")
        price = np.nan
        if not hist.empty:
            if "Close" in hist.columns:
                price = float(hist["Close"].iloc[-1])
            elif "Adj Close" in hist.columns:
                price = float(hist["Adj Close"].iloc[-1])
        hv20 = np.nan
        if len(hist) >= 21:
            ret = hist["Close"].pct_change().dropna()
            if len(ret) >= 20:
                vol20 = ret.tail(20).std()
                hv20 = vol20 * math.sqrt(252.0) * 100.0  # em %
        return price, hv20
    except Exception:
        return np.nan, np.nan

# -------------------------
# Parsing da option chain colada
# -------------------------
def parse_pasted_chain(text: str):
    if not text or text.strip() == "":
        return pd.DataFrame()

    raw = text.strip()
    if "\t" not in raw:
        raw = re.sub(r"[ ]{2,}", "\t", raw)

    try:
        df = pd.read_csv(io.StringIO(raw), sep="\t", engine="python")
    except Exception:
        try:
            df = pd.read_csv(io.StringIO(raw), sep=";", engine="python")
        except Exception:
            return pd.DataFrame()

    cols = {c: c.strip() for c in df.columns}
    df.rename(columns=cols, inplace=True)

    def find_col(cands):
        for c in df.columns:
            lc = c.lower()
            for p in cands:
                if p in lc:
                    return c
        return None

    col_ticker = find_col(["ticker"])
    col_venc = find_col(["venc", "vencimento"])
    col_tipo = find_col(["tipo"])
    col_strike = find_col(["strike"])
    col_ultimo = find_col(["√∫ltimo", "ultimo", "last"])
    col_iv = find_col(["vol. impl", "vol impl", "impl", "iv"])
    col_delta = find_col(["delta"])

    if not all([col_ticker, col_venc, col_tipo, col_strike, col_ultimo]):
        return pd.DataFrame()

    out = pd.DataFrame()
    out["symbol"] = df[col_ticker].astype(str).str.strip()
    out["type"] = df[col_tipo].astype(str).str.upper().str.contains("CALL").map({True:"C", False:"P"})
    out["strike"] = df[col_strike].apply(br_to_float)
    out["last"]   = df[col_ultimo].apply(br_to_float)
    out["expiration"] = df[col_venc].apply(parse_date_br)
    out["impliedVol"] = df[col_iv].apply(pct_to_float) if col_iv else np.nan
    out["delta"] = df[col_delta].apply(br_to_float) if col_delta else np.nan

    out = out[pd.notna(out["strike"]) & pd.notna(out["expiration"])].copy()
    return out.reset_index(drop=True)

def business_days_between(d1: date, d2: date):
    if d1 is None or d2 is None:
        return np.nan
    if d2 < d1:
        return 0
    try:
        return np.busday_count(d1, d2)
    except Exception:
        return (d2 - d1).days

# -------------------------
# Layout principal
# -------------------------
st.title("üíº Strangle Vendido Coberto ‚Äî v9")
st.caption("Cole a option chain do opcoes.net, escolha o vencimento e veja as sugest√µes did√°ticas de strangle coberto.")

# 1) Sele√ß√£o de ticker
st.markdown('<div class="big-title">üîé Selecione pelo nome da empresa ou ticker</div><div class="small-help">Digite para pesquisar por nome ou c√≥digo.</div>', unsafe_allow_html=True)
tickers_df = fetch_b3_tickers()
if tickers_df.empty:
    st.warning("N√£o consegui carregar a lista de tickers agora. Digite o c√≥digo manualmente no campo abaixo.")
    user_ticker = st.text_input("Ticker da B3", value="PETR4")
else:
    tickers_df["label"] = tickers_df["ticker"] + " ‚Äî " + tickers_df["empresa"]
    default_idx = int((tickers_df["ticker"] == "PETR4").idxmax()) if "PETR4" in set(tickers_df["ticker"]) else 0
    sel_label = st.selectbox(" ", options=tickers_df["label"].tolist(),
                             index=default_idx if default_idx is not None else 0,
                             label_visibility="collapsed")
    sel_row = tickers_df.loc[tickers_df["label"] == sel_label].iloc[0]
    user_ticker = sel_row["ticker"]

# 2) Pre√ßo via yfinance (spot)
y_ticker = yahoo_symbol_from_b3(user_ticker)
spot, hv20_auto = fetch_yf_price_and_hv20(y_ticker)

strike_html = f"""
<div class="strike-card">
  <div class="strike-label">Pre√ßo √† vista (yfinance)</div>
  <div class="strike-value">{format_brl(spot)}</div>
</div>
"""
st.markdown(strike_html, unsafe_allow_html=True)

# 3) Sidebar: par√¢metros & regras
st.sidebar.header("‚öôÔ∏è Par√¢metros & Cobertura")

hv20_default = float(hv20_auto) if pd.notna(hv20_auto) else 20.0
hv20_input = st.sidebar.number_input(
    "HV20 (œÉ anual ‚Äì proxy) [%]",
    0.0, 200.0, hv20_default, step=0.10, format="%.2f",
    help="Volatilidade hist√≥rica anualizada de 20 dias (proxy de œÉ). ‚Üë aumenta pr√™mios e tamb√©m a probabilidade de exerc√≠cio."
)
r_input = st.sidebar.number_input(
    "r (anual) [%]",
    0.0, 50.0, 11.0, step=0.10, format="%.2f",
    help="Taxa livre de risco usada no Black‚ÄìScholes. Efeito pequeno; use algo pr√≥ximo da SELIC."
)

st.sidebar.markdown("---")
qty_shares = st.sidebar.number_input(
    f"A√ß√µes em carteira ({user_ticker})",
    0, 1_000_000, 0, step=100,
    help="Usado s√≥ para validar CALL coberta (‚úÖ/‚ùå). Mais a√ß√µes permitem mais lotes cobertos."
)
cash_avail = st.sidebar.text_input(
    f"Caixa dispon√≠vel (R$) ({user_ticker})",
    value="0,00",
    help="Usado s√≥ para validar PUT coberta (‚úÖ/‚ùå) no strike da PUT. Mais caixa permite mais lotes."
)
try:
    cash_avail_val = br_to_float(cash_avail)
except Exception:
    cash_avail_val = 0.0
contract_size = st.sidebar.number_input(
    f"Tamanho do contrato ({user_ticker})",
    1, 1000, CONTRACT_SIZE, step=1,
    help="Quantidade de a√ß√µes por contrato. Aumenta proporcionalmente o pr√™mio total e a exig√™ncia de cobertura."
)

st.sidebar.markdown("---")
dias_alerta = st.sidebar.number_input(
    "Alerta de sa√≠da (dias para o vencimento) ‚â§",
    1, 30, 7,
    help="Mostra aviso de tempo quando faltar ‚â§ este n√∫mero de dias. Valores menores disparam alerta mais cedo."
)
meta_captura = st.sidebar.number_input(
    "Meta de captura do cr√©dito (%)",
    50, 100, 75,
    help="Alvo did√°tico para encerrar a opera√ß√£o com lucro. ‚Üë significa esperar capturar uma fra√ß√£o maior do cr√©dito."
)
janela_pct = st.sidebar.number_input(
    "Janela de alerta no strike (¬±%)",
    1, 20, 5,
    help="Sensibilidade para avisos de 'encostar' no strike. ‚Üë mais avisos (janela larga); ‚Üì s√≥ quando muito perto."
)

st.sidebar.markdown("---")
comb_limit = st.sidebar.slider(
    "Limite por perna para cruzar pares (velocidade)",
    10, 200, 30, step=10,
    help="Quantos strikes por lado entram na combina√ß√£o (impacta cobertura da busca e desempenho). ‚Üë mais combina√ß√µes (mais lento)."
)

# ---------- Novos controles (priorizar baixa probabilidade) ----------
st.sidebar.markdown("### üéØ Prefer√™ncia por Baixa Probabilidade")
max_poe_leg  = st.sidebar.slider(
    "Prob. m√°x por perna (%)", 5, 50, 25, step=1,
    help="Filtro 'duro' por perna (PUT e CALL). ‚Üì deixa o app mais conservador, pode reduzir fortemente os candidatos."
) / 100.0
max_poe_comb = st.sidebar.slider(
    "Prob. m√©dia m√°x (PUT/CALL) (%)", 5, 50, 20, step=1,
    help="Filtro 'duro' para a m√©dia da probabilidade das duas pernas. ‚Üì prioriza setups com menor chance de exerc√≠cio combinada."
) / 100.0
alpha        = st.sidebar.slider(
    "Penaliza√ß√£o por prob. (Œ±)", 1, 5, 2, step=1,
    help="Peso da puni√ß√£o do ranking sobre probabilidades altas. ‚Üë prioriza ainda mais PoE baixa mesmo se o pr√™mio for menor."
)
use_delta_filter = st.sidebar.checkbox(
    "Filtrar por |Œî| ~ 0,10‚Äì0,25 (se dispon√≠vel)", value=True,
    help="Quando marcado, restringe as pernas a deltas t√≠picos de OTM saud√°vel. Reduz chance de exerc√≠cio mantendo pr√™mio razo√°vel."
)
min_width_pct = st.sidebar.slider(
    "Largura m√≠nima entre strikes (% do spot)", 1, 20, 6, step=1,
    help="Exige dist√¢ncia m√≠nima entre Kp e Kc. ‚Üë for√ßa pares mais 'largos' (menor risco), mas reduz candidatos."
) / 100.0

# 4) Colar a option chain
st.subheader(f"3) Colar a option chain de {user_ticker} (opcoes.net)")
pasted = st.text_area(
    "Cole aqui a tabela (Ctrl/Cmd+C no site ‚Üí Ctrl/Cmd+V aqui)",
    height=220,
    help="A tabela precisa conter: Ticker, Vencimento, Tipo (CALL/PUT), Strike, √öltimo, (opcional) Vol. Impl. (%), Delta."
)

df_chain = parse_pasted_chain(pasted)
if df_chain.empty:
    st.info("Cole a tabela para continuar.")
    st.stop()

# 5) Selecionar vencimento
unique_exps = sorted([d for d in df_chain["expiration"].dropna().unique()])
if not unique_exps:
    st.error("N√£o identifiquei a coluna de Vencimento na tabela colada.")
    st.stop()

sel_exp = st.selectbox(
    "üìÖ Vencimento ‚Äî escolha uma data:",
    options=unique_exps,
    format_func=lambda d: d.strftime("%Y-%m-%d"),
    help="Selecione o vencimento para o qual voc√™ colou a option chain."
)
today = datetime.utcnow().date()
bus_days = business_days_between(today, sel_exp)
T_years = float(bus_days) / 252.0 if pd.notna(bus_days) and bus_days > 0 else 1/252.0

# 6) Filtrar pela data e calcular m√©tricas
df = df_chain[df_chain["expiration"] == sel_exp].copy().reset_index(drop=True)

# Fallbacks de pre√ßo: usar 'last' como mid/credito unit√°rio por op√ß√£o
df["price"] = df["last"].astype(float)

# sigma por op√ß√£o: IV se houver, sen√£o HV20 proxy
sigma_proxy = hv20_input / 100.0
df["sigma"] = df["impliedVol"].fillna(sigma_proxy)

# separa calls/puts e aplica condi√ß√£o OTM
S = float(spot) if pd.notna(spot) and spot > 0 else df["strike"].median()
calls = df[df["type"] == "C"].copy()
puts  = df[df["type"] == "P"].copy()

calls["OTM"] = calls["strike"].astype(float) > S
puts["OTM"]  = puts["strike"].astype(float)  < S

# --- filtro opcional por Delta quando dispon√≠vel ---
if use_delta_filter and "delta" in df.columns:
    calls = calls[calls["OTM"] & pd.notna(calls["price"]) & calls["delta"].abs().between(0.10, 0.25, inclusive="both")]
    puts  = puts[puts["OTM"]  & pd.notna(puts["price"])  & puts["delta"].abs().between(0.10, 0.25, inclusive="both")]
else:
    calls = calls[calls["OTM"] & pd.notna(calls["price"])]
    puts  = puts[puts["OTM"]  & pd.notna(puts["price"])]

if calls.empty or puts.empty:
    st.warning("N√£o encontrei CALL e PUT OTM simultaneamente nesse vencimento. Experimente ajustar filtros (Delta/limites).")
    st.stop()

# PoE (probabilidade de exerc√≠cio)
r = r_input / 100.0
def poe_side(row, side):
    K = float(row["strike"])
    sig = float(row["sigma"]) if pd.notna(row["sigma"]) and row["sigma"] > 0 else sigma_proxy
    return prob_ITM_call(S, K, r, sig, T_years) if side == "C" else prob_ITM_put(S, K, r, sig, T_years)

puts["poe"]  = puts.apply(lambda rw: poe_side(rw, "P"), axis=1)
calls["poe"] = calls.apply(lambda rw: poe_side(rw, "C"), axis=1)

# 7) Combina√ß√µes PUT x CALL (limitadas para velocidade) ‚Äî configur√°vel
comb_limit = int(comb_limit)
puts_small  = puts.sort_values(["price"], ascending=False).head(comb_limit).copy()
calls_small = calls.sort_values(["price"], ascending=False).head(comb_limit).copy()

pairs = []
for _, prow in puts_small.iterrows():
    for _, crow in calls_small.iterrows():
        kp = float(prow["strike"]); kc = float(crow["strike"])
        if not (kp < S < kc):
            continue
        prem_put  = float(prow["price"])
        prem_call = float(crow["price"])
        cred = prem_put + prem_call
        be_low  = kp - cred
        be_high = kc + cred
        poe_p = float(prow["poe"]) if pd.notna(prow["poe"]) else np.nan
        poe_c = float(crow["poe"]) if pd.notna(crow["poe"]) else np.nan
        pairs.append({
            "PUT": prow["symbol"],
            "CALL": crow["symbol"],
            "Kp": kp,
            "Kc": kc,
            "premio_put": prem_put,
            "premio_call": prem_call,
            "credito": cred,
            "be_low": be_low,
            "be_high": be_high,
            "poe_put": poe_p,
            "poe_call": poe_c,
        })

pairs_df = pd.DataFrame(pairs)
if pairs_df.empty:
    st.warning("N√£o h√° pares de PUT e CALL OTM v√°lidos para esse vencimento e pre√ßo √† vista.")
    st.stop()

# ---------- Largura m√≠nima entre strikes ----------
width_ok = (pairs_df["Kc"] - pairs_df["Kp"]) >= (S * min_width_pct)
pairs_df = pairs_df[width_ok]

if pairs_df.empty:
    st.warning("Todas as combina√ß√µes ficaram abaixo da largura m√≠nima entre strikes. Reduza o filtro de largura.")
    st.stop()

# ---------- Filtros duros de probabilidade ----------
pairs_df["poe_leg_max"] = pairs_df[["poe_put","poe_call"]].max(axis=1)
pairs_df["poe_comb"]    = pairs_df[["poe_put","poe_call"]].mean(axis=1)

pairs_df = pairs_df[
    (pairs_df["poe_put"]  <= max_poe_leg) &
    (pairs_df["poe_call"] <= max_poe_leg) &
    (pairs_df["poe_comb"] <= max_poe_comb)
]

if pairs_df.empty:
    st.warning("Nenhuma combina√ß√£o passou pelos limites de probabilidade. Tente relaxar os sliders de probabilidade.")
    st.stop()

# ---------- Novo score com p_inside e penaliza√ß√£o Œ± ----------
pairs_df["p_inside"] = (1 - pairs_df["poe_put"].fillna(0) - pairs_df["poe_call"].fillna(0)).clip(lower=0)
pairs_df["score"] = pairs_df["credito"] * (pairs_df["p_inside"] ** alpha)
pairs_df = pairs_df.sort_values(["score","p_inside","credito"], ascending=[False, False, False]).reset_index(drop=True)

# 8) Top 3 + flags de alerta
top3 = pairs_df.head(3).copy()
top3["days_to_exp"] = bus_days

def near_strike(price, strike, pct):
    try:
        return abs(price - strike) <= (strike * (pct/100.0))
    except Exception:
        return False

top3["alert_call"] = top3.apply(lambda r: near_strike(S, r["Kc"], janela_pct), axis=1)
top3["alert_put"]  = top3.apply(lambda r: near_strike(S, r["Kp"], janela_pct), axis=1)
top3["alert_days"] = top3["days_to_exp"] <= dias_alerta

# --- Tabela Top 3
top3_display = top3.copy()
top3_display["Pr√™mio PUT (R$)"]   = top3_display["premio_put"].map(lambda x: f"{x:.2f}")
top3_display["Pr√™mio CALL (R$)"]  = top3_display["premio_call"].map(lambda x: f"{x:.2f}")
top3_display["Cr√©dito/a√ß√£o (R$)"] = top3_display["credito"].map(lambda x: f"{x:.2f}")
top3_display["Break-evens (m√≠n‚Äìm√°x)"] = top3_display.apply(lambda r: f"{r['be_low']:.2f} ‚Äî {r['be_high']:.2f}", axis=1)
top3_display["Prob. exerc√≠cio PUT (%)"]  = (100*top3_display["poe_put"]).map(lambda x: f"{x:.1f}")
top3_display["Prob. exerc√≠cio CALL (%)"] = (100*top3_display["poe_call"]).map(lambda x: f"{x:.1f}")
top3_display["p_dentro (%)"] = (100*top3_display["p_inside"]).map(lambda x: f"{x:.1f}")

def tag_risco(row):
    tags = []
    if row["poe_leg_max"] > (max_poe_leg * 0.9):
        tags.append("‚ö†Ô∏è prob. por perna alta")
    if row["poe_comb"] > (max_poe_comb * 0.9):
        tags.append("‚ö†Ô∏è prob. m√©dia alta")
    if row["p_inside"] < 0.70:
        tags.append("üéØ dentro < 70%")
    return " ¬∑ ".join(tags)

top3_display["Notas"] = top3.apply(tag_risco, axis=1)

top3_display = top3_display[[
    "PUT","Kp",
    "CALL","Kc",
    "Pr√™mio PUT (R$)","Pr√™mio CALL (R$)","Cr√©dito/a√ß√£o (R$)",
    "Break-evens (m√≠n‚Äìm√°x)",
    "Prob. exerc√≠cio PUT (%)","Prob. exerc√≠cio CALL (%)",
    "p_dentro (%)",
    "Notas"
]]
top3_display.rename(columns={"Kp":"Strike PUT","Kc":"Strike CALL"}, inplace=True)

st.subheader("üèÜ Top 3 (prioriza pr√™mio com baixa probabilidade)")
st.dataframe(top3_display, use_container_width=True, hide_index=True)

# 9) Cart√µes detalhados
st.markdown("‚Äî")
st.subheader("üìã Recomenda√ß√µes detalhadas")

if "lot_map" not in st.session_state:
    st.session_state["lot_map"] = {}
for idx in top3.index:
    if idx not in st.session_state["lot_map"]:
        st.session_state["lot_map"][idx] = 0

for i, rw in top3.iterrows():
    rank = i + 1
    key_lotes = f"lots_{i}"
    lots = st.number_input(
        f"#{rank} ‚Äî Lotes (1 lote = 1 PUT + 1 CALL)",
        min_value=0, max_value=10000, value=st.session_state["lot_map"][i], key=key_lotes,
        help="Quantidade de lotes para esta sugest√£o. Aumenta proporcionalmente o pr√™mio total e as exig√™ncias de cobertura."
    )
    st.session_state["lot_map"][i] = lots

    effective_contract_size = int(contract_size) if contract_size else CONTRACT_SIZE
    premio_total = rw["credito"] * effective_contract_size * lots

    with st.container(border=True):
        st.markdown(
            f"**#{rank} ‚Üí Vender PUT `{rw['PUT']}` (Strike={rw['Kp']:.2f}) + CALL `{rw['CALL']}` (Strike={rw['Kc']:.2f})**"
        )
        c1, c2, c3 = st.columns([1.0, 1.2, 1.2])
        c1.metric("Cr√©dito/a√ß√£o", format_brl(rw["credito"]))
        c2.metric("Break-evens (m√≠n‚Äìm√°x)", f"{rw['be_low']:.2f} ‚Äî {rw['be_high']:.2f}")
        c3.metric("Prob. exerc√≠cio (PUT / CALL)", f"{100*rw['poe_put']:.1f}% / {100*rw['poe_call']:.1f}%")

        # Cobertura
        required_shares = effective_contract_size * lots
        required_cash   = rw["Kp"] * effective_contract_size * lots
        covered_call = qty_shares >= required_shares
        covered_put  = (cash_avail_val if pd.notna(cash_avail_val) else 0.0) >= required_cash

        cov_msg = f"üõ°Ô∏è Cobertura ‚Äî CALL: {'‚úÖ' if covered_call else '‚ùå'}  ¬∑  PUT: {'‚úÖ' if covered_put else '‚ùå'}"
        st.caption(cov_msg)
        if not covered_call or not covered_put:
            st.warning(
                f"Cobertura insuficiente para {lots} lote(s): "
                f"precisa de **{required_shares} a√ß√µes** e **{format_brl(required_cash)} em caixa** "
                f"(CALL usa a√ß√µes; PUT usa caixa no strike da PUT)."
            )

        d1, d2 = st.columns([1.1, 2.0])
        d1.metric("üéØ Pr√™mio estimado (total)", format_brl(premio_total))
        d2.markdown(
            f"**C√°lculo:** `cr√©dito/a√ß√£o √ó contrato √ó lotes` = "
            f"`{rw['credito']:.2f} √ó {effective_contract_size} √ó {lots}` ‚Üí **{format_brl(premio_total)}**"
        )

        # Alertas
        if bus_days <= dias_alerta:
            st.info(f"‚è≥ Faltam {bus_days} dia(s) para o vencimento. Considere realizar lucro se capturou ~{meta_captura}% do cr√©dito.")
        if abs(spot - rw["Kc"]) <= rw["Kc"] * (janela_pct/100.0):
            st.warning("üî∫ CALL amea√ßada (pre√ßo perto do strike da CALL). Sugest√£o: recomprar a CALL para travar o ganho.")
        if abs(spot - rw["Kp"]) <= rw["Kp"] * (janela_pct/100.0):
            st.warning("üîª PUT amea√ßada (pre√ßo perto do strike da PUT). Sugest√£o: avaliar recompra da PUT ou rolagem.")

        # Explica√ß√µes por sugest√£o
        with st.expander("üìò O que significa cada item?"):
            premio_put_txt   = format_brl(rw["premio_put"])
            premio_call_txt  = format_brl(rw["premio_call"])
            credito_acao_txt = format_brl(rw["credito"])
            be_low_txt       = f"{rw['be_low']:.2f}".replace(".", ",")
            be_high_txt      = f"{rw['be_high']:.2f}".replace(".", ",")
            poe_put_txt      = (f"{100*rw['poe_put']:.1f}%".replace(".", ",")) if pd.notna(rw["poe_put"]) else "‚Äî"
            poe_call_txt     = (f"{100*rw['poe_call']:.1f}%".replace(".", ",")) if pd.notna(rw["poe_call"]) else "‚Äî"

            st.markdown(f"""
**Cr√©dito/a√ß√£o**  
√â o total que voc√™ recebe ao vender **1 PUT + 1 CALL** (por a√ß√£o).  
**Exemplo desta sugest√£o:** PUT paga **{premio_put_txt}** e CALL paga **{premio_call_txt}** ‚Üí cr√©dito/a√ß√£o = **{credito_acao_txt}**.

**Break-evens (m√≠n‚Äìm√°x)**  
Faixa de pre√ßo no vencimento em que o resultado ainda √© ‚â• 0.  
**Exemplo:** **{be_low_txt} ‚Äî {be_high_txt}**.

**Probabilidade de exerc√≠cio (PUT / CALL)**  
Estimativa (modelo Black‚ÄìScholes) de cada op√ß√£o terminar no dinheiro no vencimento.  
**Exemplo:** PUT **{poe_put_txt}** (chance do pre√ßo ficar *abaixo* do strike da PUT) / CALL **{poe_call_txt}** (chance do pre√ßo ficar *acima* do strike da CALL).

**Lotes e pr√™mio total**  
Cada lote = vender **1 PUT + 1 CALL**. Cada contrato = **{effective_contract_size} a√ß√µes**.  
**Pr√™mio total** = **cr√©dito/a√ß√£o √ó contrato √ó lotes**.  
**Exemplo:** {credito_acao_txt} √ó {effective_contract_size} √ó {lots} ‚Üí **{format_brl(rw["credito"] * effective_contract_size * lots)}**.

**Regras pr√°ticas de sa√≠da**  
‚è≥ Faltando **{dias_alerta}** dias ou menos, acompanhe com mais aten√ß√£o.  
üìà Se o pre√ßo √† vista encostar no strike da CALL, **recompre a CALL**.  
üéØ Capturou ~**{meta_captura}%** do cr√©dito? **Encerre a opera√ß√£o**.
""")

# =========================
# ‚ÑπÔ∏è Guia de par√¢metros (final) ‚Äî gerado de forma program√°tica
# =========================
st.markdown("---")
with st.expander("‚ÑπÔ∏è Como cada par√¢metro afeta o Top 3"):
    ref = "Exemplo de refer√™ncia: spot = R$ 6,00; Kp = 5,50; Kc = 6,50; cr√©dito/a√ß√£o = R$ 0,18; contrato = 100 a√ß√µes; lotes = 2."
    st.write(ref)

    def bullet(title, items):
        st.markdown(f"- **{title}**")
        for it in items:
            st.markdown(f"  - {it}")

    bullet("Volatilidade (HV20 %)", [
        "Aumentar: pr√™mios ‚Üë e probabilidade de exerc√≠cio (PoE) ‚Üë.",
        "Diminuir: pr√™mios ‚Üì e PoE ‚Üì.",
        "Ex.: HV20 20% ‚Üí 30%: cr√©dito pode ir de R$ 0,18 ‚Üí R$ 0,22; PoE PUT/CALL sobe ~3‚Äì5 p.p."
    ])

    bullet("Taxa r (anual %)", [
        "Aumentar/Diminuir: impacto pequeno em PoE e pre√ßo te√≥rico.",
        "Ex.: 10% ‚Üí 12%: varia√ß√µes de centavos no cr√©dito; PoE quase inalterado."
    ])

    bullet("A√ß√µes em carteira", [
        "Valida CALL coberta (‚úÖ/‚ùå).",
        "Aumentar: permite vender mais lotes cobertos.",
        "Ex.: 1 contrato = 100 a√ß√µes; com 2 lotes ‚áí precisa 200 a√ß√µes."
    ])

    bullet("Caixa dispon√≠vel (R$)", [
        "Valida PUT coberta (‚úÖ/‚ùå) no strike da PUT.",
        "Aumentar: viabiliza mais lotes de PUT coberta.",
        "Ex.: Kp = 5,50; 2 lotes ‚áí precisa R$ 1.100 (2 √ó 100 √ó 5,50)."
    ])

    bullet("Tamanho do contrato", [
        "N¬∫ de a√ß√µes por contrato.",
        "Aumentar: pr√™mio total ‚Üë e exig√™ncias de cobertura ‚Üë.",
        "Ex.: cr√©dito/a√ß√£o R$ 0,18, contrato 100 ‚áí por lote = R$ 18; com 2 lotes ‚áí R$ 36."
    ])

    bullet("Alerta de sa√≠da (dias)", [
        "Define quando exibir aviso pelo tempo restante.",
        "Diminuir: o alerta aparece mais cedo.",
        "Ex.: com 7 dias, ao faltar ‚â§ 7 dias aparece o ‚è≥."
    ])

    bullet("Meta de captura do cr√©dito (%)", [
        "Alvo did√°tico para encerrar com lucro.",
        "Aumentar: voc√™ tende a esperar mais.",
        "Ex.: cr√©dito R$ 0,18; meta 75% ‚áí objetivo ‚âà R$ 0,135 por a√ß√£o capturado."
    ])

    bullet("Janela no strike (¬±%)", [
        "Sensibilidade para avisos de 'encostar' no strike.",
        "Aumentar: mais avisos. Diminuir: s√≥ quando muito perto.",
        "Ex.: Kc = 6,50; janela ¬±5% ‚áí aviso se spot entre 6,18‚Äì6,83."
    ])

    bullet("Limite por perna (combina√ß√µes)", [
        "N¬∫ de strikes por lado cruzados em pares.",
        "Aumentar: mais candidatos (app mais lento).",
        "Ex.: 30 ‚Üí 100: varre mais PUTs/CALLs; pode revelar pares melhores (leva mais tempo)."
    ])

    bullet("Prob. m√°x por perna / m√©dia", [
        "Filtros duros de PoE.",
        "Diminuir: setups mais conservadores (pode zerar a lista).",
        "Ex.: m√©dia m√°x 20% ‚áí descarta pares com PoE m√©dia > 20%."
    ])

    bullet("Penaliza√ß√£o (Œ±) no ranking", [
        "Peso da puni√ß√£o para PoE alta no score.",
        "Aumentar: prioriza ficar entre strikes (p_inside), mesmo com pr√™mio menor.",
        "Ex.: Œ± 2 ‚Üí 4: pares com p_inside maior sobem no ranking."
    ])

    bullet("Filtro por |Œî| (0,10‚Äì0,25)", [
        "Restringe a deltas t√≠picos de OTM saud√°vel (se dispon√≠vel).",
        "Ativar: tende a reduzir PoE mantendo pr√™mios razo√°veis.",
        "Ex.: CALL com |Œî| 0,35 seria filtrada; |Œî| 0,18 passaria."
    ])

    bullet("Largura m√≠nima entre strikes (% do spot)", [
        "Exige dist√¢ncia m√≠nima entre Kp e Kc.",
        "Aumentar: menos risco (pares mais 'largos'), menos candidatos.",
        "Ex.: spot R$ 6,00; largura 6% ‚áí Kc ‚àí Kp ‚â• 0,36."
    ])

# Rodap√©
st.markdown("---")
st.caption("Dica: se a cota√ß√£o do yfinance parecer defasada, clique no √≠cone de recarregar (cache ~5 min).")
